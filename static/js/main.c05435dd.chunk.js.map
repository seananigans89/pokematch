{"version":3,"sources":["Components/Header.js","Components/Instructions.js","Components/Footer.js","Components/Card.js","Components/PlayerChoice.js","Components/FetchPokemon.js","App.js","index.js"],"names":["Header","className","Instructions","to","Footer","props","id","onClick","fetchPokemon","Card","card","handleChoice","flipped","src","alt","PlayerChoice","cards","setCards","useState","firstChoice","setFirstChoice","secondChoice","setSecondChoice","useEffect","prevCards","map","matched","resetChoices","setTimeout","FetchPokemon","a","tempPokemonArr","shuffledCards","i","pokeIndex","Math","floor","random","fetch","pokemon","json","push","sprites","other","front_default","pokeDeck","sort","App","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.c05435dd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <div>\n        <h1 className=\"title\">PokéMatch</h1>\n      </div>\n      <p className=\"tagline\">Gotta Match 'em All!</p>\n    </div>\n  );\n};\n\nexport default Header;\n","\nimport { Link } from \"react-router-dom\";\n\nconst Instructions = () => {\n  return (\n    <div className=\"landing-page\">\n      <h3 className=\"welcome\">Welcome!</h3>\n      <p className=\"message\">\n        This is a classic matching memory game. Do your best to remember the\n        position of each Pokémon as you try to find matching pairs by clicking\n        on the cards to flip them over. Once all the cards have been flipped,\n        you win!\n      </p>\n      <Link to=\"/CardGrid\" className=\"play\">\n        Let's Play!\n      </Link>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import { Link } from \"react-router-dom\";\n\n\n\nconst Footer = (props) => {\n  \n  return (\n    <footer className=\"footer\">\n      <div id=\"newgame\">\n        <button onClick={props.fetchPokemon}>New Game</button>\n      </div>\n\n      <Link to=\"/Instructions\" id=\"instructions\">\n        Instructions\n      </Link>\n\n      <button >Grid Size</button>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\n\nconst Card = ({ card, handleChoice, flipped }) => {\n  const handleClick = () => {\n    handleChoice(card);\n  };\n\n  return (\n    \n    <div className=\"card\">\n      <div className={flipped ? \"flipped\" : \"\"}>\n        <img className=\"front\" src={card.card} alt=\"card\" />\n        <img\n          className=\"back\"\n          src='https://i.imgur.com/akfGYEJ.png'\n          onClick={handleClick}\n          alt=\"pokeback\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\n\nconst PlayerChoice = ({cards, setCards}) => {\n\n\n  const [firstChoice, setFirstChoice] = useState(null);\n  const [secondChoice, setSecondChoice] = useState(null);\n\n  const handleChoice = (card) => {\n    firstChoice ? setSecondChoice(card) : setFirstChoice(card);\n  };\n\n  useEffect(() => {\n    if (firstChoice && secondChoice) {\n      if (firstChoice.card === secondChoice.card) {\n        setCards((prevCards) => {\n          return prevCards.map((card) => {\n            if (card.card === firstChoice.card) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetChoices();\n      } else {\n        setTimeout(() => resetChoices(), 1000);\n      }\n    }\n  }, [firstChoice, secondChoice]);\n\n  const resetChoices = () => {\n    setFirstChoice(null);\n    setSecondChoice(null);\n  };\n\n  return (\n    <div className='wrapper'> \n      <div className=\"grid\">\n        {cards.map((card) => (\n          <Card\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            flipped={\n              card === firstChoice ||\n              card === secondChoice ||\n              card.matched\n            }\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default PlayerChoice;\n","import React, { useEffect, useState } from \"react\";\nimport Footer from \"./Footer\";\n\nimport PlayerChoice from \"./PlayerChoice\";\n\nconst FetchPokemon = () => {\n  const [cards, setCards] = useState([]);\n\n  const fetchPokemon = async () => {\n    let tempPokemonArr = [];\n    let shuffledCards = []\n    for (let i = 0; i < 8; i++) {\n      let pokeIndex = Math.floor(Math.random() * (151 - 1 + 1)) + 1;\n      const pokemon = await fetch(\n        `https://pokeapi.co/api/v2/pokemon/${pokeIndex}`\n      );\n      const json = await pokemon.json();\n\n      tempPokemonArr.push(json.sprites.other[\"official-artwork\"].front_default);\n\n      let pokeDeck = [...tempPokemonArr, ...tempPokemonArr];\n\n      shuffledCards = pokeDeck\n        .sort(() => Math.random() - 0.5)\n        .map((card) => ({ card, matched: false, id: Math.random() }));\n\n      }\n      setCards(shuffledCards);\n  };\n\n\n  useEffect(() => {\n    fetchPokemon();\n  }, []);\n\n  return (\n    <div>\n      <PlayerChoice cards={cards} setCards={setCards}/>\n      <Footer fetchPokemon={fetchPokemon}/>\n    </div>\n  );\n};\n\nexport default FetchPokemon;\n","import { Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Header from \"./Components/Header\";\nimport Instructions from \"./Components/Instructions\";\nimport FetchPokemon from \"./Components/FetchPokemon\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route exact path=\"/Instructions\" render={() => <Instructions />} />\n        <Route exact path=\"/CardGrid\" render={() => <FetchPokemon />} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {HashRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}