{"version":3,"sources":["Components/Card.js","Components/Header.js","Components/Instructions.js","Components/Footer.js","Components/CardGrid.js","App.js","index.js"],"names":["Card","card","handleChoice","flipped","className","src","alt","onClick","Header","Instructions","to","Footer","props","id","fetchPokemon","CardGrid","cards","map","firstChoice","secondChoice","matched","App","useState","setCards","setFirstChoice","setSecondChoice","a","tempPokemonArr","i","pokeIndex","Math","floor","random","fetch","pokemon","json","push","sprites","other","front_default","pokeDeck","shuffledCards","sort","useEffect","prevCards","resetChoices","setTimeout","exact","path","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.88622c57.chunk.js","sourcesContent":["import React from \"react\";\nconst Card = ({ card, handleChoice, flipped }) => {\n  const handleClick = () => {\n    handleChoice(card);\n  };\n\n  return (\n    <div className=\"card\">\n      <div className={flipped ? \"flipped\" : \"\"}>\n        <img className=\"front\" src={card.card} alt=\"card\" />\n        <img\n          className=\"back\"\n          src='https://i.imgur.com/akfGYEJ.png'\n          onClick={handleClick}\n          alt=\"pokeback\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <div>\n        <h1 className=\"title\">PokéMatch</h1>\n      </div>\n      <p className=\"tagline\">Gotta Match 'em All!</p>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Instructions = () => {\n  return (\n    <div className=\"landing-page\">\n      <h3 className=\"welcome\">Welcome!</h3>\n      <p className=\"message\">\n        This is a classic matching memory game. Do your best to remember the\n        position of each Pokémon as you try to find matching pairs by clicking\n        on the cards to flip them over. Once all the cards have been flipped,\n        you win!\n      </p>\n      <Link to=\"/CardGrid\" className=\"play\">\n        Let's Play!\n      </Link>\n    </div>\n  );\n};\n\nexport default Instructions;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Footer = (props) => {\n  return (\n    <footer className=\"footer\">\n      <div id=\"newgame\">\n        <button onClick={props.fetchPokemon}>New Game</button>\n      </div>\n\n      <Link to=\"/Instructions\" id=\"instructions\">\n        Instructions\n      </Link>\n\n      <button>Generation</button>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport Footer from \"./Footer\";\n\nconst CardGrid = (props) => {\n  return (\n    <div className=\"grid\">\n      {props.cards.map((card) => (\n        <props.Card\n          key={card.id}\n          card={card}\n          handleChoice={props.handleChoice}\n          flipped={\n            card === props.firstChoice ||\n            card === props.secondChoice ||\n            card.matched\n          }\n        />\n      ))}\n\n      <Footer fetchPokemon={props.fetchPokemon} />\n    </div>\n  );\n};\n\nexport default CardGrid;\n","import { useState, useEffect } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Card from \"./Components/Card\";\nimport Header from \"./Components/Header\";\nimport Instructions from \"./Components/Instructions\";\nimport CardGrid from \"./Components/CardGrid\";\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [firstChoice, setFirstChoice] = useState(null);\n  const [secondChoice, setSecondChoice] = useState(null);\n\n  const fetchPokemon = async () => {\n    let tempPokemonArr = [];\n    for (let i = 0; i < 8; i++) {\n      let pokeIndex = Math.floor(Math.random() * (151 - 1 +1)) + 1\n      const pokemon = await fetch(\n        `https://pokeapi.co/api/v2/pokemon/${pokeIndex}`\n      );\n      const json = await pokemon.json();\n\n      tempPokemonArr.push(json.sprites.other[\"official-artwork\"].front_default);\n\n      let pokeDeck = [...tempPokemonArr, ...tempPokemonArr];\n\n      const shuffledCards = pokeDeck\n        .sort(() => Math.random() - 0.5)\n        .map((card) => ({ card, matched: false, id: Math.random() }));\n\n      setCards(shuffledCards);\n    }\n  };\n  useEffect(() => {\n    fetchPokemon();\n  }, []);\n\n  const handleChoice = (card) => {\n    firstChoice ? setSecondChoice(card) : setFirstChoice(card);\n  };\n  useEffect(() => {\n    if (firstChoice && secondChoice) {\n      if (firstChoice.card === secondChoice.card) {\n\n        setCards((prevCards) => {\n          return prevCards.map((card) => {\n            if (card.card === firstChoice.card) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetChoices();\n      } else {\n        setTimeout(() => resetChoices(), 1000);\n      }\n    }\n  }, [firstChoice, secondChoice]);\n\n  const resetChoices = () => {\n    setFirstChoice(null);\n    setSecondChoice(null);\n  };\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <Route exact path=\"/Instructions\" render={() => <Instructions />} />\n\n      <div className=\"wrapper\">\n        <Route\n          exact\n          path=\"/CardGrid\"\n          render={() => (\n            <CardGrid\n              cards={cards}\n              Card={Card}\n              handleChoice={handleChoice}\n              firstChoice={firstChoice}\n              secondChoice={secondChoice}\n              fetchPokemon={fetchPokemon}\n            />\n          )}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {HashRouter as Router} from 'react-router-dom';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}